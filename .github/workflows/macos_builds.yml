name: 🍎 macOS Builds
on:
  workflow_call:

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes production=yes warnings=extra werror=yes module_text_server_fb_enabled=yes

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-macos
  cancel-in-progress: true

jobs:
  build-macos:
    runs-on: "macos-latest"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor (target=editor)
            cache-name: macos-editor
            target: editor
            sconsflags: production=yes
            tests: false
            bin: "./bin/godot.macos.editor.universal"

          - name: Template (target=template_release)
            cache-name: macos-template
            target: template_release
            tests: false
            sconsflags: debug_symbols=no production=yes
            bin: "./bin/godot.macos.template_release.universal"

          - name: Template (target=template_debug)
            cache-name: macos-template-debug
            target: template_debug
            tests: false
            sconsflags: production=no
            bin: "./bin/godot.macos.template_debug.universal"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          submodules: recursive

      - uses: actions/checkout@v4
        with:
          path: patch
          sparse-checkout: |
            patch.py
          sparse-checkout-cone-mode: false

      - name: Apply Patches
        run: |
          python patch/patch.py

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download pre-built AccessKit
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: AccessKit/accesskit-c
          version: tags/0.16.0
          file: accesskit-c-0.16.0.zip
          target: accesskit-c-0.16.0/accesskit_c.zip

      - name: Setup Vulkan SDK
        id: vulkan-sdk
        run: |
          if sh misc/scripts/install_vulkan_sdk_macos.sh; then
            echo "VULKAN_ENABLED=yes" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::macOS: Vulkan SDK installation failed, building without Vulkan support."
            echo "VULKAN_ENABLED=no" >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true

      - name: Extract pre-built AccessKit
        run: unzip -o accesskit-c-0.16.0/accesskit_c.zip

      - name: Compilation (x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }} arch=x86_64 vulkan=${{ steps.vulkan-sdk.outputs.VULKAN_ENABLED }}
          platform: macos
          target: ${{ matrix.target }}
          tests: ${{ matrix.tests }}

      - name: Compilation (arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }} arch=arm64 vulkan=${{ steps.vulkan-sdk.outputs.VULKAN_ENABLED }}
          platform: macos
          target: ${{ matrix.target }}
          tests: ${{ matrix.tests }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Prepare artifact
        run: |
          lipo -create ./bin/godot.macos.${{ matrix.target }}.x86_64 ./bin/godot.macos.${{ matrix.target }}.arm64 -output ./bin/godot.macos.${{ matrix.target }}.universal
          rm ./bin/godot.macos.${{ matrix.target }}.x86_64 ./bin/godot.macos.${{ matrix.target }}.arm64
          strip bin/godot.*
          chmod +x bin/godot.*

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}

      - name: Unit tests
        if: ${{ matrix.tests }}
        run: |
          ${{ matrix.bin }} --version
          ${{ matrix.bin }} --help
          ${{ matrix.bin }} --test --force-colors
